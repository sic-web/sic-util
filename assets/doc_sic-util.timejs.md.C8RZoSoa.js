import{_ as t,c as i,o as a,ag as e}from"./chunks/framework.CQgK1aae.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/sic-util.timejs.md","filePath":"doc/sic-util.timejs.md"}'),p={name:"doc/sic-util.timejs.md"};function d(n,s,r,h,o,l){return a(),i("div",null,s[0]||(s[0]=[e('<p><a href="./">Home</a> &gt; <a href="./sic-util.html">sic-util</a> &gt; <a href="./sic-util.timejs.html">timejs</a></p><h2 id="timejs-function" tabindex="-1">timejs() function <a class="header-anchor" href="#timejs-function" aria-label="Permalink to &quot;timejs() function&quot;">​</a></h2><p>timejs 依赖于 dayjs 构建，形成管理时间的工具函数 TypeScript 中的 <code>timejs</code> 函数接受一个参数 <code>props</code>，并返回使用 <code>props</code> 调用 <code>dayjs</code> 的结果。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes light-plus github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#B392F0;">timejs</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#001080;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#267F99;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#001080;--shiki-dark:#FFAB70;">props1</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#267F99;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#001080;--shiki-dark:#FFAB70;">props2</span><span style="--shiki-light:#000000;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#267F99;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;"> dayjs</span><span style="--shiki-light:#000000;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#001080;--shiki-dark:#E1E4E8;">Dayjs</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>props</p></td><td><p>any</p></td><td><p><em>(Optional)</em> <code>timejs</code> 函数中的 <code>props</code> 参数预计为 <code>any</code> 类型，这意味着它可以接受任何数据类型作为其值。</p></td></tr><tr><td><p>props1</p></td><td><p>any</p></td><td><p><em>(Optional)</em></p></td></tr><tr><td><p>props2</p></td><td><p>any</p></td><td><p><em>(Optional)</em></p></td></tr></tbody></table> **Returns:** <p>dayjs.Dayjs</p><p><code>timejs</code> 函数正在返回使用 <code>props</code> 参数调用 <code>dayjs</code> 函数的结果。</p>',10)]))}const m=t(p,[["render",d]]);export{k as __pageData,m as default};
